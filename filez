15-Dec-2022:
   keyloop - disable irq0 and irq1, poll for keypress and print char, q to quit

16-Dec-2022:
   dma - set DMA refresh to occur every 76 PIT pulses

21-Dec-2022:
   lockstep - get CPU within 1 cycle (3 hdots) of lockstep with CRTC

22-Dec-2022:
   keyloop - basic CRT loop which checks for a key each iteration
             if a key is pressed everything restarts
             at the top of the loop the background colour is changed briefly
             there is a delay (delay1) between the loop top and keyboard check
             there is a delay (delay2) between the keyboard check and loop top
             there is a delay (delay3) before the first iteration of the loop
             keys are as follows:
                W = delay1 += 1
                E = delay2 -= 1
                R = delay1 += 4
                T = delay2 -= 4
                Y = delay3 += 1
                U = delay3 += 4
             Basically W,E move the keyboard handler to the right one cycle
                       R,T move the keyboard handler to the right four cycles
                       Y moves the background register write to the right one cycle
                       U moves the background register write to the right four cycles
             Note: keys that increment by 1 do so in limited range, usually 0-6 or so
                   going outside the range will result in unpredicatable results
                   press keys for incrementing by 4 for larger jumps

28-Dec-2022:
   hdisp1 -  code for experimenting with changing the hdisp. reg.
             the code changes the hdisp reg. from an initial value to another
             value and then back again later in the frame
             the exact position of the write is shown by a red bar which starts
             at the very beginning of the frame but can be moved about down to
             the hdot
             the write occurs in the hdot immediately following the red bar
             keys are as follows:
                q = quit program
                e = move down one scanline
                t = increment the initial value of hdisp (starts at 0)
                y = move right by one hdot
                u = move right by 4 cycles = 12 hdots
                i = switch to graphical mode to see result
                o = increment the value hdisp is changed to (also starts at 0)
                p = move left by 1 hdot
                [ = move left by 4 cycles = 12 hdots
                ] = switch back to grid mode
             the following keys are also available but the program must be modified
             to make effective use of them
                w = pad main loop by 1 cycle
                r = pad main loop by 4 cycles

31-Dec-2022:
   hdisp2 -  code for updating hdisp twice instead of once on the same scanline
             this code is based on the defunct hordisp described above rather
             than the greatly improved hdisp1 code

   htot1 -   set up the display with htotal+1 = 55+1 initially and for 3
             rasterlines change it to 27+1
             controls are as for hdisp1 above except that t/o control htotal
             instead (which causes loss of sync) and e cannot move by precisely
             one scanline so doesn't even try to be precise

   htot2 -   as for htot1 except that the display is set up initially with
             htotal+1 = 56+1 and for 3 rasterlines is set to 18+1

   htot3 -   as for htot1 except that the display is set up initially with
             htotal+1 = 56+1 and for 2 rasterlines is set to 37+1

